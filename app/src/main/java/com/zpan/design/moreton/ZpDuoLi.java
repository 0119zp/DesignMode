package com.zpan.design.moreton;

/**
 * 多例模式
 *
 * -- 可以减少内存开支，省去了反复创建对象和回收对象的麻烦。
 */

public class ZpDuoLi {

    /**
     *
     * 单例和多例的详细描述：
     1. 什么是单例多例:
     所谓单例就是所有的请求都用一个对象来处理，比如我们常用的service和dao层的对象通常都是单例的，而多例则指每个
     请求用一个新的对象来处理，比如action;
     2. 如何产生单例多例:
     在通用的SSH中，单例在spring中是默认的，如果要产生多例，则在配置文件的bean中添加scope="prototype";
     3. 为什么用单例多例：
     之所以用单例，是因为没必要每个请求都新建一个对象，这样子既浪费CPU又浪费内存；
     之所以用多例，是为了防止并发问题；即一个请求改变了对象的状态，此时对象又处理另一个请求，而之前请求对对象状
     态的改变导致了对象对另一个请求做了错误的处理；
     用单例和多例的标准只有一个：
     当对象含有可改变的状态时（更精确的说就是在实际应用中该状态会改变），则多例，否则单例；
     4. 何时用单例？何时用多例？
     对于struts2来说，action必须用多例，因为action本身含有请求参数的值，即可改变的状态；
     而对于STRUTS1来说，action则可用单例，因为请求参数的值是放在actionForm中，而非action中的；
     另外要说一下，并不是说service或dao一定是单例，标准同第3点所讲的，就曾见过有的service中也包含了可改变的状态，
     同时执行方法也依赖该状态，但一样用的单例，这样就会出现隐藏的BUG,而并发的BUG通常很难重现和查找；
     *
     */




}
